name: Continuous Integration
on:
    push:
        branches:
            - master
    pull_request:
        branches:
            - master

jobs:
    infrastructure_tests:
        name: Infrastructure tests
        runs-on: ubuntu-18.04
        steps:
            - uses: actions/checkout@v1
            - uses: cachix/install-nix-action@v12
            - name: Nix requirements
              run: nix-shell
            - name: Run tests
              run: nix-shell --command "scripts/test.sh --infrastructure"
    server_tests:
        services:
            postgres:
                image: postgres:11
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: postgres
                ports:
                    - 5432/tcp
                      # needed because the postgres container does not provide a healthcheck
                options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        name: Server tests
        runs-on: ubuntu-18.04
        steps:
            - uses: actions/checkout@v1
            - uses: actions/setup-node@master
              with:
                  node-version: "16.x"
            - uses: actions/setup-python@master
              with:
                  python-version: "3.9"
            - name: Python requirements
              run: pip install -r requirements.txt
            - name: Yarn
              run: |
                  playwright install
                  yarn
                  yarn --cwd packages/reactivated
                  yarn --cwd sample
                  python scripts/generate_types.py
                  yarn --cwd packages/reactivated/ tsc --outDir ../../sample/node_modules/reactivated/
                  rm -rf sample/node_modules/reactivated/node_modules/react
                  rm -rf sample/node_modules/reactivated/node_modules/react-dom
            - name: Run tests
              run: scripts/test.sh --server
              env:
                  DATABASE_USER: postgres
                  DATABASE_PASSWORD: postgres
                  DATABASE_NAME: postgres
                  DATABASE_HOST: localhost
                  DATABASE_PORT: ${{ job.services.postgres.ports[5432] }}
    client_tests:
        name: Client tests
        runs-on: ubuntu-18.04
        steps:
            - uses: actions/checkout@v1
            - uses: actions/setup-node@master
              with:
                  node-version: "16.x"
            - uses: actions/setup-python@master
              with:
                  python-version: "3.9"
            - name: Python requirements
              run: pip install -r requirements.txt
            - name: Yarn
              run: |
                  yarn
                  yarn --cwd packages/reactivated
                  yarn --cwd sample
            - name: Run tests
              run: scripts/test.sh --client
    integration_tests:
        name: Integration tests
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [macos-11, ubuntu-20.04]
        steps:
            - uses: actions/checkout@v2.4.0
            - uses: cachix/install-nix-action@v15
              with:
                  nix_path: nixpkgs=channel:nixos-unstable
            - name: Setup git
              run: |
                  git config --global user.email "example@example.com"
                  git config --global user.name "Example"
            - name: Setup reactivated
              run: |
                  nix-shell --command "yarn --cwd packages/reactivated"
                  nix-shell --command "pip install -r requirements.txt"
                  nix-shell --command "python scripts/generate_types.py"
            - name: Create test project
              run: |
                  scripts/script-create-django-app.sh --name create_django_test
            - name: Run tests
              run: |
                  cd create_django_test
                  nix-shell --command "python manage.py generate_client_assets"
                  nix-shell --command "python manage.py build"
                  nix-shell --command "scripts/test.sh"
                  nix-shell --command "scripts/remove_example.sh"
                  nix-shell --command "python manage.py generate_client_assets"
                  nix-shell --command "python manage.py build"
                  nix-shell --command "scripts/test.sh"
