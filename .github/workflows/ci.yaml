name: Continuous Integration
on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

jobs:
    code_tests:
        name: Code tests
        runs-on: ubuntu-20.04
        env:
            NIX_BUILD_SHELL: bash
        steps:
            - uses: actions/checkout@v3
              with:
                  fetch-depth: 0
            - uses: cachix/install-nix-action@v15
              with:
                  nix_path: nixpkgs=channel:nixos-unstable
            - name: Cache .venv
              id: cache-venv
              uses: actions/cache@v3
              with:
                  path: |
                      .venv
                      node_modules
                      !.venv/postgresql
                  key: ${{ runner.os }}-nix-cache
            - name: Nix requirements
              run: |
                  nix-shell -E '(import ./shell.nix).overrideAttrs ( oldAttrs: rec { shellHook = ""; })'
            - name: Get pip cache dir
              id: pip-cache-dir
              if: steps.cache-venv.outputs.cache-hit == 'true'
              run: |
                  echo "::set-output name=dir::$(.venv/bin/pip cache dir)"
            - name: pip cache
              uses: actions/cache@v3
              if: steps.cache-venv.outputs.cache-hit == 'true'
              with:
                  path: ${{ steps.pip-cache-dir.outputs.dir }}
                  key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
            - name: Get npm cache directory
              id: npm-cache-dir
              run: |
                  echo "::set-output name=dir::$(npm config get cache)"
            - uses: actions/cache@v3
              id: npm-cache
              with:
                  path: ${{ steps.npm-cache-dir.outputs.dir }}
                  key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
            - name: Build
              run: nix-shell --command "npm install && python scripts/generate_types.py && npm exec -w reactivated tsc && playwright install && npm install"
              shell: bash
            - run: |
                  nix-shell --command "scripts/test.sh"
                  # integration_tests:
                  #     name: Integration tests
                  #     runs-on: ${{ matrix.os }}
                  #     strategy:
                  #         matrix:
                  #             os: [macos-11, ubuntu-20.04]
                  #     steps:
                  #         - uses: actions/checkout@v3
                  #           with:
                  #               fetch-depth: 0
                  #         - uses: ./.github/actions/setup
                  #         - name: Setup git
                  #           run: |
                  #               git config --global user.email "example@example.com"
                  #               git config --global user.name "Example"
                  #         - name: Create test project
                  #           run: |
                  #               scripts/script-create-django-app.sh --name integration
                  #         - name: Run tests
                  #           run: |
                  #               cd integration
                  #               nix-shell --command "python manage.py generate_client_assets"
                  #               nix-shell --command "python manage.py build"
                  #               nix-shell --command "scripts/test.sh"
                  #               nix-shell --command "scripts/remove_example.sh"
                  #               nix-shell --command "python manage.py generate_client_assets"
                  #               nix-shell --command "python manage.py build"
                  #               nix-shell --command "scripts/test.sh"
                  # website_tests:
                  #     name: Website tests
                  #     runs-on: ubuntu-20.04
                  #     steps:
                  #         - uses: actions/checkout@v3
                  #           with:
                  #               fetch-depth: 0
                  #         - uses: ./.github/actions/setup
                  #         - name: Run tests
                  #           run: |
                  #               cd website
                  #               nix-shell --command "python manage.py generate_client_assets"
                  #               nix-shell --command "scripts/test.sh --all"
                  # docker_tests:
                  #     name: Docker tests
                  #     runs-on: ubuntu-20.04
                  #     steps:
                  #         - uses: actions/checkout@v3
                  #           with:
                  #               fetch-depth: 0
                  #         - uses: ./.github/actions/setup
                  #         - name: Set up QEMU
                  #           uses: docker/setup-qemu-action@v1
                  #         - name: Set up Docker Buildx
                  #           uses: docker/setup-buildx-action@v1
                  #         - name: Login to DockerHub
                  #           uses: docker/login-action@v1
                  #           with:
                  #               username: ${{ secrets.DOCKERHUB_USERNAME }}
                  #               password: ${{ secrets.DOCKERHUB_TOKEN }}
                  #         - name: "Prepare docker context"
                  #           run: scripts/build-create-django-app-docker.sh
                  #         - name: Build and push
                  #           uses: docker/build-push-action@v2
                  #           with:
                  #               context: website_build_context
                  #               platforms: linux/amd64,linux/arm64
                  #               file: website_build_context/Dockerfile
                  #               push: false
                  #               cache-from: type=gha
                  #               cache-to: type=gha,mode=max
                  #               tags: silviogutierrez/reactivated:ci
