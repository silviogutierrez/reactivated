## Proxy types
This is currently used only for form and form sets, but could be used for
everything and get rid of the registration system.

So:

```
@proxy(models.Field)
class ModelFieldType:
    @classmethod
    def get_json_schema(
        Proxy: Type["ModelFieldType"],
        Type: Type[models.Field],
        definitions: Definitions,
    ) -> "Thing":
        ...
```

This can handle the built-in fields. Custom fields can then just use:


```
@proxy(CustomField)
class CustomFieldType:
    ...
```

To specify how to create the schema and serialize.

Since we want to use DRF's ClassLookupDict, you can actually even override
serialization for built-in types. So the ModelFieldType handles the default for
say, `DecimalField`. But you can do a custom one by registering a more specific
type:

```
@proxy(DecimalField)
class CustomDecimalFieldType
    ...

```

This will get picked up before the basic handler.
