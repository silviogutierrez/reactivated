// Digest: e975929aa4bf568211493d7fd1d569f4980b3d95
/* eslint-disable */
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface Types {
  DjangoDefaultProps: ServerTemplatesDjangoDefault;
  globals: {};
  Context: ReactivatedSerializationContextProcessorsBaseContext;
}
export interface ServerTemplatesDjangoDefault {
  version: string;
  form: ServerTemplatesFoo;
}
export interface ServerTemplatesFoo {
  name: "server.templates.Foo";
  errors: {} | null;
  fields: {};
  prefix: string;
  iterator: [];
}
export interface ReactivatedSerializationContextProcessorsBaseContext {
  template_name: string;
}
const urls = {};

export interface URLMap {
}

type WithArguments;
type WithoutArguments;


type All = WithArguments|WithoutArguments;
export function reverse<T extends WithoutArguments['name']>(name: T): string;
export function reverse<T extends WithArguments['name']>(name: T, args: Extract<WithArguments, {name: T}>['args']): string;
export function reverse<T extends All['name']>(name: T, args?: Extract<WithArguments, {name: T}>['args']): string {
    let route = urls[name].route;

    if (args != null) {
        for (const token of Object.keys(args)) {
            route = route.replace(new RegExp('<(.+?:)' + token + '>'), (args as any)[token]);
        }
    }
    return route;
}

import React from "react"
import createContext from "reactivated/context";
import * as forms from "reactivated/forms";

// Note: this needs strict function types to behave correctly with excess properties etc.
export type Checker<P, U extends (React.FunctionComponent<P> | React.ComponentClass<P>)> = {};

export const {Context, Provider, getServerData} = createContext<Types["Context"]>();

export const getTemplate = ({template_name}: {template_name: string}) => {
    // This require needs to be *inside* the function to avoid circular dependencies with esbuild.
    const { default: templates, filenames } = require('../templates/**/*');
    const templatePath = "../templates/" + template_name + ".tsx";
    const Template: React.ComponentType<any> = templates.find((t: any, index: number) => filenames[index] === templatePath).default;
    return Template;
}

export const CSRFToken = forms.createCSRFToken(Context);

export const {createRenderer, Iterator} = forms.bindWidgetType<Types["globals"]["Widget"]>();


import DjangoDefaultImplementation from "@client/templates/DjangoDefault"
export type DjangoDefaultCheck = Checker<Types["DjangoDefaultProps"], typeof DjangoDefaultImplementation>;


        

